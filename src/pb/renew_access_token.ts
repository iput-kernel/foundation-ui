// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.28.3
// source: renew_access_token.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "pb";

export interface RenewAccessTokenRequest {
  refleshToken: string;
}

export interface RenewAccessTokenResponse {
  accessToken: string;
  accessTokenExpiresAt: string;
}

function createBaseRenewAccessTokenRequest(): RenewAccessTokenRequest {
  return { refleshToken: "" };
}

export const RenewAccessTokenRequest: MessageFns<RenewAccessTokenRequest> = {
  encode(message: RenewAccessTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.refleshToken !== "") {
      writer.uint32(10).string(message.refleshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenewAccessTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenewAccessTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.refleshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenewAccessTokenRequest {
    return { refleshToken: isSet(object.refleshToken) ? globalThis.String(object.refleshToken) : "" };
  },

  toJSON(message: RenewAccessTokenRequest): unknown {
    const obj: any = {};
    if (message.refleshToken !== "") {
      obj.refleshToken = message.refleshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RenewAccessTokenRequest>, I>>(base?: I): RenewAccessTokenRequest {
    return RenewAccessTokenRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RenewAccessTokenRequest>, I>>(object: I): RenewAccessTokenRequest {
    const message = createBaseRenewAccessTokenRequest();
    message.refleshToken = object.refleshToken ?? "";
    return message;
  },
};

function createBaseRenewAccessTokenResponse(): RenewAccessTokenResponse {
  return { accessToken: "", accessTokenExpiresAt: "" };
}

export const RenewAccessTokenResponse: MessageFns<RenewAccessTokenResponse> = {
  encode(message: RenewAccessTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.accessTokenExpiresAt !== "") {
      writer.uint32(18).string(message.accessTokenExpiresAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RenewAccessTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRenewAccessTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accessTokenExpiresAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RenewAccessTokenResponse {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      accessTokenExpiresAt: isSet(object.accessTokenExpiresAt) ? globalThis.String(object.accessTokenExpiresAt) : "",
    };
  },

  toJSON(message: RenewAccessTokenResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.accessTokenExpiresAt !== "") {
      obj.accessTokenExpiresAt = message.accessTokenExpiresAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RenewAccessTokenResponse>, I>>(base?: I): RenewAccessTokenResponse {
    return RenewAccessTokenResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RenewAccessTokenResponse>, I>>(object: I): RenewAccessTokenResponse {
    const message = createBaseRenewAccessTokenResponse();
    message.accessToken = object.accessToken ?? "";
    message.accessTokenExpiresAt = object.accessTokenExpiresAt ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
